// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlockDeviceInitParameters struct {

	// 1 if more than one is configured. Changing this creates a new server. Note: You must set the boot index to 0 for one of the block devices if more than one is defined.
	// The boot index of the volume. It defaults to 0 if only one `block_device` is specified, and to -1 if more than one is configured. Changing this creates a new server. _note_ You must set the boot index to 0 for one of the block devices if more than one is defined.
	BootIndex *float64 `json:"bootIndex,omitempty" tf:"boot_index,omitempty"`

	// optional boolean →  Delete the volume / block device upon termination of the instance. Defaults to false. Changing this creates a new server.  raw HTML omitted  It is important to enable delete_on_termination for volumes created with instance. Defaults to false. Changing this creates a new server. __note__ It is important to enable `delete_on_termination` for volumes created with instance
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	// optional string →  The type that gets created. Possible values are "volume" and "local". Changing this creates a new server.
	// The type that gets created. Possible values are "volume" and "local". Changing this creates a new server.
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// level device type that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	// The low-level device type that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// level disk bus that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	// The low-level disk bus that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	DiskBus *string `json:"diskBus,omitempty" tf:"disk_bus,omitempty"`

	// optional string →  Specifies the guest server disk file system format, such as ext2, ext3, ext4, xfs or swap. Swap block device mappings have the following restrictions: source_type must be blank and destination_type must be local and only one swap disk per server and the size of the swap disk must be less than or equal to the swap size of the flavor. Changing this creates a new server.
	// Specifies the guest server disk file system format, such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings have the following restrictions: source_type must be blank and destination_type must be local and only one swap disk per server and the size of the swap disk must be less than or equal to the swap size of the flavor. Changing this creates a new server.
	GuestFormat *string `json:"guestFormat,omitempty" tf:"guest_format,omitempty"`

	// required string →  The source type of the device. Must be one of "blank", "image", "volume", or "snapshot". Changing this creates a new server.
	// The source type of the device. Must be one of "blank", "image", "volume", or "snapshot". Changing this creates a new server.
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// optional number →  The size of the volume to create (in gigabytes). Required in the following combinations: source=image and destination=volume, source=blank and destination=local, and source=blank and destination=volume. Changing this creates a new server.
	// The size of the volume to create (in gigabytes). Required in the following combinations: source=image and destination=volume, source=blank and destination=local, and source=blank and destination=volume. Changing this creates a new server.
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// optional string →  The volume type that will be used. Changing this creates a new server.
	// The volume type that will be used. Changing this creates a new server.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type BlockDeviceObservation struct {

	// 1 if more than one is configured. Changing this creates a new server. Note: You must set the boot index to 0 for one of the block devices if more than one is defined.
	// The boot index of the volume. It defaults to 0 if only one `block_device` is specified, and to -1 if more than one is configured. Changing this creates a new server. _note_ You must set the boot index to 0 for one of the block devices if more than one is defined.
	BootIndex *float64 `json:"bootIndex,omitempty" tf:"boot_index,omitempty"`

	// optional boolean →  Delete the volume / block device upon termination of the instance. Defaults to false. Changing this creates a new server.  raw HTML omitted  It is important to enable delete_on_termination for volumes created with instance. Defaults to false. Changing this creates a new server. __note__ It is important to enable `delete_on_termination` for volumes created with instance
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	// optional string →  The type that gets created. Possible values are "volume" and "local". Changing this creates a new server.
	// The type that gets created. Possible values are "volume" and "local". Changing this creates a new server.
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// level device type that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	// The low-level device type that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// level disk bus that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	// The low-level disk bus that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	DiskBus *string `json:"diskBus,omitempty" tf:"disk_bus,omitempty"`

	// optional string →  Specifies the guest server disk file system format, such as ext2, ext3, ext4, xfs or swap. Swap block device mappings have the following restrictions: source_type must be blank and destination_type must be local and only one swap disk per server and the size of the swap disk must be less than or equal to the swap size of the flavor. Changing this creates a new server.
	// Specifies the guest server disk file system format, such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings have the following restrictions: source_type must be blank and destination_type must be local and only one swap disk per server and the size of the swap disk must be less than or equal to the swap size of the flavor. Changing this creates a new server.
	GuestFormat *string `json:"guestFormat,omitempty" tf:"guest_format,omitempty"`

	// required string →  The source type of the device. Must be one of "blank", "image", "volume", or "snapshot". Changing this creates a new server.
	// The source type of the device. Must be one of "blank", "image", "volume", or "snapshot". Changing this creates a new server.
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// optional string →  The UUID of the image, volume, or snapshot. Optional if source_type is set to "blank". Changing this creates a new server.
	// The UUID of the image, volume, or snapshot. Optional if `source_type` is set to `"blank"`. Changing this creates a new server.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// optional number →  The size of the volume to create (in gigabytes). Required in the following combinations: source=image and destination=volume, source=blank and destination=local, and source=blank and destination=volume. Changing this creates a new server.
	// The size of the volume to create (in gigabytes). Required in the following combinations: source=image and destination=volume, source=blank and destination=local, and source=blank and destination=volume. Changing this creates a new server.
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// optional string →  The volume type that will be used. Changing this creates a new server.
	// The volume type that will be used. Changing this creates a new server.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type BlockDeviceParameters struct {

	// 1 if more than one is configured. Changing this creates a new server. Note: You must set the boot index to 0 for one of the block devices if more than one is defined.
	// The boot index of the volume. It defaults to 0 if only one `block_device` is specified, and to -1 if more than one is configured. Changing this creates a new server. _note_ You must set the boot index to 0 for one of the block devices if more than one is defined.
	// +kubebuilder:validation:Optional
	BootIndex *float64 `json:"bootIndex,omitempty" tf:"boot_index,omitempty"`

	// optional boolean →  Delete the volume / block device upon termination of the instance. Defaults to false. Changing this creates a new server.  raw HTML omitted  It is important to enable delete_on_termination for volumes created with instance. Defaults to false. Changing this creates a new server. __note__ It is important to enable `delete_on_termination` for volumes created with instance
	// +kubebuilder:validation:Optional
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty" tf:"delete_on_termination,omitempty"`

	// optional string →  The type that gets created. Possible values are "volume" and "local". Changing this creates a new server.
	// The type that gets created. Possible values are "volume" and "local". Changing this creates a new server.
	// +kubebuilder:validation:Optional
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// level device type that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	// The low-level device type that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// level disk bus that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	// The low-level disk bus that will be used. Most common thing is to leave this empty. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	DiskBus *string `json:"diskBus,omitempty" tf:"disk_bus,omitempty"`

	// optional string →  Specifies the guest server disk file system format, such as ext2, ext3, ext4, xfs or swap. Swap block device mappings have the following restrictions: source_type must be blank and destination_type must be local and only one swap disk per server and the size of the swap disk must be less than or equal to the swap size of the flavor. Changing this creates a new server.
	// Specifies the guest server disk file system format, such as `ext2`, `ext3`, `ext4`, `xfs` or `swap`. Swap block device mappings have the following restrictions: source_type must be blank and destination_type must be local and only one swap disk per server and the size of the swap disk must be less than or equal to the swap size of the flavor. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	GuestFormat *string `json:"guestFormat,omitempty" tf:"guest_format,omitempty"`

	// required string →  The source type of the device. Must be one of "blank", "image", "volume", or "snapshot". Changing this creates a new server.
	// The source type of the device. Must be one of "blank", "image", "volume", or "snapshot". Changing this creates a new server.
	// +kubebuilder:validation:Optional
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`

	// optional string →  The UUID of the image, volume, or snapshot. Optional if source_type is set to "blank". Changing this creates a new server.
	// The UUID of the image, volume, or snapshot. Optional if `source_type` is set to `"blank"`. Changing this creates a new server.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/disk/v1alpha1.Volume
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Reference to a Volume in disk to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDRef *v1.Reference `json:"uuidRef,omitempty" tf:"-"`

	// Selector for a Volume in disk to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDSelector *v1.Selector `json:"uuidSelector,omitempty" tf:"-"`

	// optional number →  The size of the volume to create (in gigabytes). Required in the following combinations: source=image and destination=volume, source=blank and destination=local, and source=blank and destination=volume. Changing this creates a new server.
	// The size of the volume to create (in gigabytes). Required in the following combinations: source=image and destination=volume, source=blank and destination=local, and source=blank and destination=volume. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// optional string →  The volume type that will be used. Changing this creates a new server.
	// The volume type that will be used. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type InstanceInitParameters struct {

	// optional string →  The first detected Fixed IPv4 address.
	// The first detected Fixed IPv4 address.
	AccessIPV4 *string `json:"accessIpV4,omitempty" tf:"access_ip_v4,omitempty"`

	// optional string →  The availability zone in which to create the server. Conflicts with availability_zone_hints. Changing this creates a new server.
	// The availability zone in which to create the server. Conflicts with `availability_zone_hints`. Changing this creates a new server.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// optional →  Configuration of block devices. The block_device structure is documented below. Changing this creates a new server. You can specify multiple block devices which will create an instance with multiple disks. This configuration is very flexible, so please see the following reference for more information.
	// Configuration of block devices. The block_device structure is documented below. Changing this creates a new server. You can specify multiple block devices which will create an instance with multiple disks. This configuration is very flexible, so please see the following [reference](https://docs.openstack.org/nova/latest/user/block-device-mapping.html) for more information.
	BlockDevice []BlockDeviceInitParameters `json:"blockDevice,omitempty" tf:"block_device,omitempty"`

	// optional boolean →  Whether to use the config_drive feature to configure the instance. Changing this creates a new server.
	// Whether to use the config_drive feature to configure the instance. Changing this creates a new server.
	ConfigDrive *bool `json:"configDrive,omitempty" tf:"config_drive,omitempty"`

	// optional string →  The name of the desired flavor for the server. Required if flavor_id is empty. Changing this resizes the existing server.
	// The name of the desired flavor for the server. Required if `flavor_id` is empty. Changing this resizes the existing server.
	FlavorName *string `json:"flavorName,omitempty" tf:"flavor_name,omitempty"`

	// optional boolean →  Whether to force the compute instance to be forcefully deleted. This is useful for environments that have reclaim / soft deletion enabled.
	// Whether to force the compute instance to be forcefully deleted. This is useful for environments that have reclaim / soft deletion enabled.
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// optional string →  The name of the desired image for the server. Required if image_id is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	// The name of the desired image for the server. Required if `image_id` is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// optional string →  The name of a key pair to put on the server. The key pair must already be created and associated with the tenant's account. Changing this creates a new server.
	// The name of a key pair to put on the server. The key pair must already be created and associated with the tenant's account. Changing this creates a new server.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// optional map of string →  Metadata key/value pairs to make available from within the instance. Changing this updates the existing server metadata.
	// Metadata key/value pairs to make available from within the instance. Changing this updates the existing server metadata.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// required string →  A unique name for the resource.
	// A unique name for the resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional →  An array of one or more networks to attach to the instance. The network object structure is documented below. Changing this creates a new server.
	// An array of one or more networks to attach to the instance. The network object structure is documented below. Changing this creates a new server.
	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// optional string →  Special string for network option to create the server. network_mode can be "auto" or "none". Please see the following reference for more information. Conflicts with network.
	// Special string for `network` option to create the server. `network_mode` can be `"auto"` or `"none"`. Please see the following [reference](https://docs.openstack.org/api-ref/compute/?expanded=create-server-detail#id11) for more information. Conflicts with `network`.
	NetworkMode *string `json:"networkMode,omitempty" tf:"network_mode,omitempty"`

	// optional →  Customize the personality of an instance by defining one or more files and their contents. The personality structure is described below. Note: 'config_drive' must be enabled.
	// Customize the personality of an instance by defining one or more files and their contents. The personality structure is described below. _note_ 'config_drive' must be enabled.
	Personality []PersonalityInitParameters `json:"personality,omitempty" tf:"personality,omitempty"`

	// exec or files are not supported.
	// Provide the VM state. Only 'active' and 'shutoff' are supported values. _note_ If the initial power_state is the shutoff the VM will be stopped immediately after build and the provisioners like remote-exec or files are not supported.
	PowerState *string `json:"powerState,omitempty" tf:"power_state,omitempty"`

	// optional string →  The region in which to create the server instance. If omitted, the region argument of the provider is used. Changing this creates a new server.
	// The region in which to create the server instance. If omitted, the `region` argument of the provider is used. Changing this creates a new server.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional →  Provide the Nova scheduler with hints on how the instance should be launched. The available hints are described below.
	// Provide the Nova scheduler with hints on how the instance should be launched. The available hints are described below.
	SchedulerHints []SchedulerHintsInitParameters `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// optional set of string →  An array of one or more security group names to associate with the server. Changing this results in adding/removing security groups from the existing server. Note: When attaching the instance to networks using Ports, place the security groups on the Port and not the instance. Note: Names should be used and not ids, as ids trigger unnecessary updates.
	// An array of one or more security group names to associate with the server. Changing this results in adding/removing security groups from the existing server. _note_ When attaching the instance to networks using Ports, place the security groups on the Port and not the instance. _note_ Names should be used and not ids, as ids trigger unnecessary updates.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// optional boolean →  Whether to try stop instance gracefully before destroying it, thus giving chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	// Whether to try stop instance gracefully before destroying it, thus giving chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	StopBeforeDestroy *bool `json:"stopBeforeDestroy,omitempty" tf:"stop_before_destroy,omitempty"`

	// optional set of string →  A set of string tags for the instance. Changing this updates the existing instance tags.
	// A set of string tags for the instance. Changing this updates the existing instance tags.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional string →  The user data to provide when launching the instance.	Changing this creates a new server.
	// The user data to provide when launching the instance.	Changing this creates a new server.
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// specific options. Supported options are described below.
	// Map of additional vendor-specific options. Supported options are described below.
	VendorOptions []VendorOptionsInitParameters `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`
}

type InstanceObservation struct {

	// optional string →  The first detected Fixed IPv4 address.
	// The first detected Fixed IPv4 address.
	AccessIPV4 *string `json:"accessIpV4,omitempty" tf:"access_ip_v4,omitempty"`

	AllMetadata map[string]*string `json:"allMetadata,omitempty" tf:"all_metadata,omitempty"`

	// set of string →  The collection of tags assigned on the instance, which have been explicitly and implicitly added.
	// The collection of tags assigned on the instance, which have been explicitly and implicitly added.
	AllTags []*string `json:"allTags,omitempty" tf:"all_tags,omitempty"`

	// optional string →  The availability zone in which to create the server. Conflicts with availability_zone_hints. Changing this creates a new server.
	// The availability zone in which to create the server. Conflicts with `availability_zone_hints`. Changing this creates a new server.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// optional →  Configuration of block devices. The block_device structure is documented below. Changing this creates a new server. You can specify multiple block devices which will create an instance with multiple disks. This configuration is very flexible, so please see the following reference for more information.
	// Configuration of block devices. The block_device structure is documented below. Changing this creates a new server. You can specify multiple block devices which will create an instance with multiple disks. This configuration is very flexible, so please see the following [reference](https://docs.openstack.org/nova/latest/user/block-device-mapping.html) for more information.
	BlockDevice []BlockDeviceObservation `json:"blockDevice,omitempty" tf:"block_device,omitempty"`

	// optional boolean →  Whether to use the config_drive feature to configure the instance. Changing this creates a new server.
	// Whether to use the config_drive feature to configure the instance. Changing this creates a new server.
	ConfigDrive *bool `json:"configDrive,omitempty" tf:"config_drive,omitempty"`

	// optional string →  The flavor ID of the desired flavor for the server. Required if flavor_name is empty. Changing this resizes the existing server.
	// The flavor ID of the desired flavor for the server. Required if `flavor_name` is empty. Changing this resizes the existing server.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// optional string →  The name of the desired flavor for the server. Required if flavor_id is empty. Changing this resizes the existing server.
	// The name of the desired flavor for the server. Required if `flavor_id` is empty. Changing this resizes the existing server.
	FlavorName *string `json:"flavorName,omitempty" tf:"flavor_name,omitempty"`

	// optional boolean →  Whether to force the compute instance to be forcefully deleted. This is useful for environments that have reclaim / soft deletion enabled.
	// Whether to force the compute instance to be forcefully deleted. This is useful for environments that have reclaim / soft deletion enabled.
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// optional string →  The image ID of the desired image for the server. Required if image_name is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	// The image ID of the desired image for the server. Required if `image_name` is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// optional string →  The name of the desired image for the server. Required if image_id is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	// The name of the desired image for the server. Required if `image_id` is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// optional string →  The name of a key pair to put on the server. The key pair must already be created and associated with the tenant's account. Changing this creates a new server.
	// The name of a key pair to put on the server. The key pair must already be created and associated with the tenant's account. Changing this creates a new server.
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// optional map of string →  Metadata key/value pairs to make available from within the instance. Changing this updates the existing server metadata.
	// Metadata key/value pairs to make available from within the instance. Changing this updates the existing server metadata.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// required string →  A unique name for the resource.
	// A unique name for the resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional →  An array of one or more networks to attach to the instance. The network object structure is documented below. Changing this creates a new server.
	// An array of one or more networks to attach to the instance. The network object structure is documented below. Changing this creates a new server.
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// optional string →  Special string for network option to create the server. network_mode can be "auto" or "none". Please see the following reference for more information. Conflicts with network.
	// Special string for `network` option to create the server. `network_mode` can be `"auto"` or `"none"`. Please see the following [reference](https://docs.openstack.org/api-ref/compute/?expanded=create-server-detail#id11) for more information. Conflicts with `network`.
	NetworkMode *string `json:"networkMode,omitempty" tf:"network_mode,omitempty"`

	// optional →  Customize the personality of an instance by defining one or more files and their contents. The personality structure is described below. Note: 'config_drive' must be enabled.
	// Customize the personality of an instance by defining one or more files and their contents. The personality structure is described below. _note_ 'config_drive' must be enabled.
	Personality []PersonalityObservation `json:"personality,omitempty" tf:"personality,omitempty"`

	// exec or files are not supported.
	// Provide the VM state. Only 'active' and 'shutoff' are supported values. _note_ If the initial power_state is the shutoff the VM will be stopped immediately after build and the provisioners like remote-exec or files are not supported.
	PowerState *string `json:"powerState,omitempty" tf:"power_state,omitempty"`

	// optional string →  The region in which to create the server instance. If omitted, the region argument of the provider is used. Changing this creates a new server.
	// The region in which to create the server instance. If omitted, the `region` argument of the provider is used. Changing this creates a new server.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional →  Provide the Nova scheduler with hints on how the instance should be launched. The available hints are described below.
	// Provide the Nova scheduler with hints on how the instance should be launched. The available hints are described below.
	SchedulerHints []SchedulerHintsObservation `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// optional set of string →  An array of one or more security group names to associate with the server. Changing this results in adding/removing security groups from the existing server. Note: When attaching the instance to networks using Ports, place the security groups on the Port and not the instance. Note: Names should be used and not ids, as ids trigger unnecessary updates.
	// An array of one or more security group names to associate with the server. Changing this results in adding/removing security groups from the existing server. _note_ When attaching the instance to networks using Ports, place the security groups on the Port and not the instance. _note_ Names should be used and not ids, as ids trigger unnecessary updates.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// optional boolean →  Whether to try stop instance gracefully before destroying it, thus giving chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	// Whether to try stop instance gracefully before destroying it, thus giving chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	StopBeforeDestroy *bool `json:"stopBeforeDestroy,omitempty" tf:"stop_before_destroy,omitempty"`

	// optional set of string →  A set of string tags for the instance. Changing this updates the existing instance tags.
	// A set of string tags for the instance. Changing this updates the existing instance tags.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional string →  The user data to provide when launching the instance.	Changing this creates a new server.
	// The user data to provide when launching the instance.	Changing this creates a new server.
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// specific options. Supported options are described below.
	// Map of additional vendor-specific options. Supported options are described below.
	VendorOptions []VendorOptionsObservation `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`
}

type InstanceParameters struct {

	// optional string →  The first detected Fixed IPv4 address.
	// The first detected Fixed IPv4 address.
	// +kubebuilder:validation:Optional
	AccessIPV4 *string `json:"accessIpV4,omitempty" tf:"access_ip_v4,omitempty"`

	// optional sensitive string →  The administrative password to assign to the server. Changing this changes the root password on the existing server.
	// The administrative password to assign to the server. Changing this changes the root password on the existing server.
	// +kubebuilder:validation:Optional
	AdminPassSecretRef *v1.SecretKeySelector `json:"adminPassSecretRef,omitempty" tf:"-"`

	// optional string →  The availability zone in which to create the server. Conflicts with availability_zone_hints. Changing this creates a new server.
	// The availability zone in which to create the server. Conflicts with `availability_zone_hints`. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// optional →  Configuration of block devices. The block_device structure is documented below. Changing this creates a new server. You can specify multiple block devices which will create an instance with multiple disks. This configuration is very flexible, so please see the following reference for more information.
	// Configuration of block devices. The block_device structure is documented below. Changing this creates a new server. You can specify multiple block devices which will create an instance with multiple disks. This configuration is very flexible, so please see the following [reference](https://docs.openstack.org/nova/latest/user/block-device-mapping.html) for more information.
	// +kubebuilder:validation:Optional
	BlockDevice []BlockDeviceParameters `json:"blockDevice,omitempty" tf:"block_device,omitempty"`

	// optional boolean →  Whether to use the config_drive feature to configure the instance. Changing this creates a new server.
	// Whether to use the config_drive feature to configure the instance. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	ConfigDrive *bool `json:"configDrive,omitempty" tf:"config_drive,omitempty"`

	// optional string →  The flavor ID of the desired flavor for the server. Required if flavor_name is empty. Changing this resizes the existing server.
	// The flavor ID of the desired flavor for the server. Required if `flavor_name` is empty. Changing this resizes the existing server.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-openstack/apis/compute/v1alpha1.FlavorV2
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Reference to a FlavorV2 in compute to populate flavorId.
	// +kubebuilder:validation:Optional
	FlavorIDRef *v1.Reference `json:"flavorIdRef,omitempty" tf:"-"`

	// Selector for a FlavorV2 in compute to populate flavorId.
	// +kubebuilder:validation:Optional
	FlavorIDSelector *v1.Selector `json:"flavorIdSelector,omitempty" tf:"-"`

	// optional string →  The name of the desired flavor for the server. Required if flavor_id is empty. Changing this resizes the existing server.
	// The name of the desired flavor for the server. Required if `flavor_id` is empty. Changing this resizes the existing server.
	// +kubebuilder:validation:Optional
	FlavorName *string `json:"flavorName,omitempty" tf:"flavor_name,omitempty"`

	// optional boolean →  Whether to force the compute instance to be forcefully deleted. This is useful for environments that have reclaim / soft deletion enabled.
	// Whether to force the compute instance to be forcefully deleted. This is useful for environments that have reclaim / soft deletion enabled.
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// optional string →  The image ID of the desired image for the server. Required if image_name is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	// The image ID of the desired image for the server. Required if `image_name` is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/disk/v1alpha1.Image
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Reference to a Image in disk to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDRef *v1.Reference `json:"imageIdRef,omitempty" tf:"-"`

	// Selector for a Image in disk to populate imageId.
	// +kubebuilder:validation:Optional
	ImageIDSelector *v1.Selector `json:"imageIdSelector,omitempty" tf:"-"`

	// optional string →  The name of the desired image for the server. Required if image_id is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	// The name of the desired image for the server. Required if `image_id` is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	ImageName *string `json:"imageName,omitempty" tf:"image_name,omitempty"`

	// optional string →  The name of a key pair to put on the server. The key pair must already be created and associated with the tenant's account. Changing this creates a new server.
	// The name of a key pair to put on the server. The key pair must already be created and associated with the tenant's account. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	KeyPair *string `json:"keyPair,omitempty" tf:"key_pair,omitempty"`

	// optional map of string →  Metadata key/value pairs to make available from within the instance. Changing this updates the existing server metadata.
	// Metadata key/value pairs to make available from within the instance. Changing this updates the existing server metadata.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// required string →  A unique name for the resource.
	// A unique name for the resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional →  An array of one or more networks to attach to the instance. The network object structure is documented below. Changing this creates a new server.
	// An array of one or more networks to attach to the instance. The network object structure is documented below. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// optional string →  Special string for network option to create the server. network_mode can be "auto" or "none". Please see the following reference for more information. Conflicts with network.
	// Special string for `network` option to create the server. `network_mode` can be `"auto"` or `"none"`. Please see the following [reference](https://docs.openstack.org/api-ref/compute/?expanded=create-server-detail#id11) for more information. Conflicts with `network`.
	// +kubebuilder:validation:Optional
	NetworkMode *string `json:"networkMode,omitempty" tf:"network_mode,omitempty"`

	// optional →  Customize the personality of an instance by defining one or more files and their contents. The personality structure is described below. Note: 'config_drive' must be enabled.
	// Customize the personality of an instance by defining one or more files and their contents. The personality structure is described below. _note_ 'config_drive' must be enabled.
	// +kubebuilder:validation:Optional
	Personality []PersonalityParameters `json:"personality,omitempty" tf:"personality,omitempty"`

	// exec or files are not supported.
	// Provide the VM state. Only 'active' and 'shutoff' are supported values. _note_ If the initial power_state is the shutoff the VM will be stopped immediately after build and the provisioners like remote-exec or files are not supported.
	// +kubebuilder:validation:Optional
	PowerState *string `json:"powerState,omitempty" tf:"power_state,omitempty"`

	// optional string →  The region in which to create the server instance. If omitted, the region argument of the provider is used. Changing this creates a new server.
	// The region in which to create the server instance. If omitted, the `region` argument of the provider is used. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional →  Provide the Nova scheduler with hints on how the instance should be launched. The available hints are described below.
	// Provide the Nova scheduler with hints on how the instance should be launched. The available hints are described below.
	// +kubebuilder:validation:Optional
	SchedulerHints []SchedulerHintsParameters `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// optional set of string →  An array of one or more security group names to associate with the server. Changing this results in adding/removing security groups from the existing server. Note: When attaching the instance to networks using Ports, place the security groups on the Port and not the instance. Note: Names should be used and not ids, as ids trigger unnecessary updates.
	// An array of one or more security group names to associate with the server. Changing this results in adding/removing security groups from the existing server. _note_ When attaching the instance to networks using Ports, place the security groups on the Port and not the instance. _note_ Names should be used and not ids, as ids trigger unnecessary updates.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// optional boolean →  Whether to try stop instance gracefully before destroying it, thus giving chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	// Whether to try stop instance gracefully before destroying it, thus giving chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
	// +kubebuilder:validation:Optional
	StopBeforeDestroy *bool `json:"stopBeforeDestroy,omitempty" tf:"stop_before_destroy,omitempty"`

	// optional set of string →  A set of string tags for the instance. Changing this updates the existing instance tags.
	// A set of string tags for the instance. Changing this updates the existing instance tags.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional string →  The user data to provide when launching the instance.	Changing this creates a new server.
	// The user data to provide when launching the instance.	Changing this creates a new server.
	// +kubebuilder:validation:Optional
	UserData *string `json:"userData,omitempty" tf:"user_data,omitempty"`

	// specific options. Supported options are described below.
	// Map of additional vendor-specific options. Supported options are described below.
	// +kubebuilder:validation:Optional
	VendorOptions []VendorOptionsParameters `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`
}

type NetworkInitParameters struct {

	// optional boolean →  Specifies if this network should be used for provisioning access. Accepts true or false. Defaults to false.
	// Specifies if this network should be used for provisioning access. Accepts true or false. Defaults to false.
	AccessNetwork *bool `json:"accessNetwork,omitempty" tf:"access_network,omitempty"`

	// optional string →  Specifies a fixed IPv4 address to be used on this network. Changing this creates a new server.
	// Specifies a fixed IPv4 address to be used on this network. Changing this creates a new server.
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// required string →  A unique name for the resource.
	// The human-readable name of the network. Optional if `uuid` or `port` is provided. Changing this creates a new server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type NetworkObservation struct {

	// optional boolean →  Specifies if this network should be used for provisioning access. Accepts true or false. Defaults to false.
	// Specifies if this network should be used for provisioning access. Accepts true or false. Defaults to false.
	AccessNetwork *bool `json:"accessNetwork,omitempty" tf:"access_network,omitempty"`

	// optional string →  Specifies a fixed IPv4 address to be used on this network. Changing this creates a new server.
	// Specifies a fixed IPv4 address to be used on this network. Changing this creates a new server.
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// string →  The MAC address of the NIC on that network.
	// The MAC address of the NIC on that network.
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// required string →  A unique name for the resource.
	// The human-readable name of the network. Optional if `uuid` or `port` is provided. Changing this creates a new server.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The port UUID of a network to attach to the server. Optional if uuid or name is provided. Changing this creates a new server. Note: If port is used, only its security groups will be applied instead of security_groups instance argument.
	// The port UUID of a network to attach to the server. Optional if `uuid` or `name` is provided. Changing this creates a new server. _note_ If port is used, only its security groups will be applied instead of security_groups instance argument.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// optional string →  The network UUID to attach to the server. Optional if port or name is provided. Changing this creates a new server.
	// The network UUID to attach to the server. Optional if `port` or `name` is provided. Changing this creates a new server.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NetworkParameters struct {

	// optional boolean →  Specifies if this network should be used for provisioning access. Accepts true or false. Defaults to false.
	// Specifies if this network should be used for provisioning access. Accepts true or false. Defaults to false.
	// +kubebuilder:validation:Optional
	AccessNetwork *bool `json:"accessNetwork,omitempty" tf:"access_network,omitempty"`

	// optional string →  Specifies a fixed IPv4 address to be used on this network. Changing this creates a new server.
	// Specifies a fixed IPv4 address to be used on this network. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// required string →  A unique name for the resource.
	// The human-readable name of the network. Optional if `uuid` or `port` is provided. Changing this creates a new server.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The port UUID of a network to attach to the server. Optional if uuid or name is provided. Changing this creates a new server. Note: If port is used, only its security groups will be applied instead of security_groups instance argument.
	// The port UUID of a network to attach to the server. Optional if `uuid` or `name` is provided. Changing this creates a new server. _note_ If port is used, only its security groups will be applied instead of security_groups instance argument.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/network/v1alpha1.Port
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Reference to a Port in network to populate port.
	// +kubebuilder:validation:Optional
	PortRef *v1.Reference `json:"portRef,omitempty" tf:"-"`

	// Selector for a Port in network to populate port.
	// +kubebuilder:validation:Optional
	PortSelector *v1.Selector `json:"portSelector,omitempty" tf:"-"`

	// optional string →  The network UUID to attach to the server. Optional if port or name is provided. Changing this creates a new server.
	// The network UUID to attach to the server. Optional if `port` or `name` is provided. Changing this creates a new server.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/network/v1alpha1.Network
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Reference to a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDRef *v1.Reference `json:"uuidRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate uuid.
	// +kubebuilder:validation:Optional
	UUIDSelector *v1.Selector `json:"uuidSelector,omitempty" tf:"-"`
}

type PersonalityInitParameters struct {

	// required string →  The contents of the file. Limited to 255 bytes.
	// The contents of the file. Limited to 255 bytes.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// required string →  The absolute path of the destination file.
	// The absolute path of the destination file.
	File *string `json:"file,omitempty" tf:"file,omitempty"`
}

type PersonalityObservation struct {

	// required string →  The contents of the file. Limited to 255 bytes.
	// The contents of the file. Limited to 255 bytes.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// required string →  The absolute path of the destination file.
	// The absolute path of the destination file.
	File *string `json:"file,omitempty" tf:"file,omitempty"`
}

type PersonalityParameters struct {

	// required string →  The contents of the file. Limited to 255 bytes.
	// The contents of the file. Limited to 255 bytes.
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// required string →  The absolute path of the destination file.
	// The absolute path of the destination file.
	// +kubebuilder:validation:Optional
	File *string `json:"file" tf:"file,omitempty"`
}

type SchedulerHintsInitParameters struct {

	// optional string →  A UUID of a Server Group. The instance will be placed into that group.
	// A UUID of a Server Group. The instance will be placed into that group.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`
}

type SchedulerHintsObservation struct {

	// optional string →  A UUID of a Server Group. The instance will be placed into that group.
	// A UUID of a Server Group. The instance will be placed into that group.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`
}

type SchedulerHintsParameters struct {

	// optional string →  A UUID of a Server Group. The instance will be placed into that group.
	// A UUID of a Server Group. The instance will be placed into that group.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`
}

type VendorOptionsInitParameters struct {

	// optional boolean →  Whether to try to detach all attached ports to the vm before destroying it to make sure the port state is correct after the vm destruction. This is helpful when the port is not deleted.
	// Whether to try to detach all attached ports to the vm before destroying it to make sure the port state is correct after the vm destruction. This is helpful when the port is not deleted.
	DetachPortsBeforeDestroy *bool `json:"detachPortsBeforeDestroy,omitempty" tf:"detach_ports_before_destroy,omitempty"`

	// optional boolean →  Boolean to control whether to ignore manual confirmation of the instance resizing.
	// Boolean to control whether to ignore manual confirmation of the instance resizing.
	IgnoreResizeConfirmation *bool `json:"ignoreResizeConfirmation,omitempty" tf:"ignore_resize_confirmation,omitempty"`
}

type VendorOptionsObservation struct {

	// optional boolean →  Whether to try to detach all attached ports to the vm before destroying it to make sure the port state is correct after the vm destruction. This is helpful when the port is not deleted.
	// Whether to try to detach all attached ports to the vm before destroying it to make sure the port state is correct after the vm destruction. This is helpful when the port is not deleted.
	DetachPortsBeforeDestroy *bool `json:"detachPortsBeforeDestroy,omitempty" tf:"detach_ports_before_destroy,omitempty"`

	// optional boolean →  Boolean to control whether to ignore manual confirmation of the instance resizing.
	// Boolean to control whether to ignore manual confirmation of the instance resizing.
	IgnoreResizeConfirmation *bool `json:"ignoreResizeConfirmation,omitempty" tf:"ignore_resize_confirmation,omitempty"`
}

type VendorOptionsParameters struct {

	// optional boolean →  Whether to try to detach all attached ports to the vm before destroying it to make sure the port state is correct after the vm destruction. This is helpful when the port is not deleted.
	// Whether to try to detach all attached ports to the vm before destroying it to make sure the port state is correct after the vm destruction. This is helpful when the port is not deleted.
	// +kubebuilder:validation:Optional
	DetachPortsBeforeDestroy *bool `json:"detachPortsBeforeDestroy,omitempty" tf:"detach_ports_before_destroy,omitempty"`

	// optional boolean →  Boolean to control whether to ignore manual confirmation of the instance resizing.
	// Boolean to control whether to ignore manual confirmation of the instance resizing.
	// +kubebuilder:validation:Optional
	IgnoreResizeConfirmation *bool `json:"ignoreResizeConfirmation,omitempty" tf:"ignore_resize_confirmation,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API. Manages a compute VM instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
